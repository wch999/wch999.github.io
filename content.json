{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"c","date":"2023-12-01T01:36:56.000Z","updated":"2023-12-01T02:03:31.290Z","comments":true,"path":"c/index.html","permalink":"http://example.com/c/index.html","excerpt":"","text":"qwertaqwe qwe 123$(document).ready(function () &#123; alert(&#x27;RUNOOB&#x27;);&#125;);"}],"posts":[{"title":"linux命令","slug":"linux命令","date":"2023-12-08T08:26:46.000Z","updated":"2023-12-08T09:08:37.250Z","comments":true,"path":"2023/12/08/linux命令/","permalink":"http://example.com/2023/12/08/linux%E5%91%BD%E4%BB%A4/","excerpt":"","text":"**cd ** 命令用于改变当前工作目录的命令，切换到指定的路径。 若目录名称省略，则变换至使用者的 home 目录 (也就是刚 login 时所在的目录)。 另外，~ 也表示为 home 目录 的意思， . 则是表示目前所在的目录， .. 则表示目前目录位置的上一层目录 1cd [dirName] 例如：cd &#x2F;var&#x2F;log **mkdir ** 命令用于创建目录 例如：mkdir &#x2F;var&#x2F;log&#x2F;abc **touch ** 命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。 ls -l 可以显示档案的时间记录。 a 改变档案的读取时间记录。 m 改变档案的修改时间记录。 c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。 f 不使用，是为了与其他 unix 系统的相容性而保留。 r 使用参考档的时间记录，与 –file 的效果一样。 d 设定时间与日期，可以使用各种不同的格式。 t 设定档案的时间记录，格式与 date 指令相同。 –no-create 不会建立新档案。 –help 列出指令格式。 –version 列出版本讯息。 使用指令”touch”时，如果指定的文件不存在，则将创建一个新的空白文件。 ln 命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。 当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。 –backup[&#x3D;CONTROL] 备份已存在的目标文件 -b 类似 –backup ，但不接受参数 -d 允许超级用户制作目录的硬链接 -f 强制执行 -i 交互模式，文件存在则提示用户是否覆盖 -n 把符号链接视为一般目录 -s 软链接(符号链接) -v 显示详细的处理过程 **rm ** 命令用于删除一个文件或者目录 -i 删除前逐一询问确认。 -f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。 -r 将目录及以下之档案亦逐一删除。 **cp ** 命令主要用于复制文件或目录。 -a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于 dpR 参数组合。 -d：复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。 -r 或 --recursive：用于复制目录及其所有的子目录和文件，如果要复制目录，需要使用该选项。 -i或–interactive&#96;：在复制前提示确认，如果目标文件已存在，则会询问是否覆盖，回答 y 时目标文件将被覆盖。。 -u 或 --update：仅复制源文件中更新时间较新的文件。 -v 或 --verbose：显示详细的复制过程。 -p 或 --preserve：保留源文件的权限、所有者和时间戳信息。 -f 或 --force：强制复制，即使目标文件已存在也会覆盖，而且不给出提示。 -l：不复制文件，只是生成链接文件。 **ls ** 命令用于显示指定工作目录下之内容（列出目前工作目录所含的文件及子目录)。 -a 显示所有文件及目录 (. 开头的隐藏文件也会列出) -d 只列出目录（不递归列出目录内的文件）。 -l 以长格式显示文件和目录信息，包括权限、所有者、大小、创建时间等。 -r 倒序显示文件和目录。 -t 将按照修改时间排序，最新的文件在最前面。 -A 同 -a ，但不列出 “.” (目前目录) 及 “..” (父目录) -F 在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “&#x2F;“ -R 递归显示目录中的所有文件和子目录。 **chmod ** 命令是控制用户对文件的权限的命令 Linux&#x2F;Unix 的文件调用权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）。 使用权限 : 所有使用者 u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。 表示增加权限、- 表示取消权限、&#x3D; 表示唯一设定权限。 r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。 -c : 若该文件权限确实已经更改，才显示其更改动作 -f : 若该文件权限无法被更改也不要显示错误讯息 -v : 显示权限变更的详细资料 -R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递归的方式逐个变更) –help : 显示辅助说明 –version : 显示版本 **mv ** 命令用来为文件或目录改名、或将文件或目录移入其它位置 -b: 当目标文件或目录存在时，在执行覆盖前，会为其创建一个备份。 -i: 如果指定移动的源目录或文件与目标的目录或文件同名，则会先询问是否覆盖旧文件，输入 y 表示直接覆盖，输入 n 表示取消该操作。 -f: 如果指定移动的源目录或文件与目标的目录或文件同名，不会询问，直接覆盖旧文件。 -n: 不要覆盖任何已存在的文件或目录。 -u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。 **cat ** 命令用于连接文件并打印到标准输出设备上。 -n 或 –number：由 1 开始对所有输出的行数编号。 -b 或 –number-nonblank：和 -n 相似，只不过对于空白行不编号。 -s 或 –squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行。 -v 或 –show-nonprinting：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外。 -E 或 –show-ends : 在每行结束处显示 $。 -T 或 –show-tabs: 将 TAB 字符显示为 ^I。 -A, –show-all：等价于 -vET。 -e：等价于”-vE”选项； -t：等价于”-vT”选项； **which ** which指令会在环境变量$PATH设置的目录里查找符合条件的文件。 -n&lt;文件名长度&gt; 指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。 -p&lt;文件名长度&gt; 与-n参数相同，但此处的&lt;文件名长度&gt;包括了文件的路径。 -w 指定输出时栏位的宽度。 -V 显示版本信息。 **yum ** 是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。 基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。 yum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。 **vi&#x2F;vim ** Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。 用户刚刚启动 vi&#x2F;vim，便进入了命令模式。 此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。 以下是普通模式常用的几个命令： i – 切换到输入模式，在光标当前位置开始输入文本。 x – 删除当前光标所在处的字符。 : – 切换到底线命令模式，以在最底一行输入命令。 a – 进入插入模式，在光标下一个位置开始输入文本。 o：在当前行的下方插入一个新行，并进入插入模式。 O – 在当前行的上方插入一个新行，并进入插入模式。 dd – 删除当前行。 yy – 复制当前行。 p（小写） – 粘贴剪贴板内容到光标下方。 P（大写）– 粘贴剪贴板内容到光标上方。 u – 撤销上一次操作。 Ctrl + r – 重做上一次撤销的操作。 :w – 保存文件。 :q – 退出 Vim 编辑器。 :q! – 强制退出Vim 编辑器，不保存修改。 在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。 在输入模式中，可以使用以下按键： 字符按键以及Shift组合，输入字符 ENTER，回车键，换行 BACK SPACE，退格键，删除光标前一个字符 DEL，删除键，删除光标后一个字符 方向键，在文本中移动光标 HOME&#x2F;END，移动光标到行首&#x2F;行尾 Page Up&#x2F;Page Down，上&#x2F;下翻页 Insert，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线 ESC，退出输入模式，切换到命令模式 在命令模式下按下 :（英文冒号）就进入了底线命令模式。 底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。 在底线命令模式中，基本的命令有（已经省略了冒号）： :w&#96;：保存文件。 :q&#96;：退出 Vim 编辑器。 :wq：保存文件并退出 Vim 编辑器。 :q!：强制退出Vim编辑器，不保存修改。","categories":[],"tags":[]},{"title":"arp欺骗攻击","slug":"arp欺骗攻击","date":"2023-12-07T08:20:47.000Z","updated":"2023-12-07T08:58:01.350Z","comments":true,"path":"2023/12/07/arp欺骗攻击/","permalink":"http://example.com/2023/12/07/arp%E6%AC%BA%E9%AA%97%E6%94%BB%E5%87%BB/","excerpt":"","text":"**arp欺骗攻击 ** 打开编辑 ———&gt; 虚拟网络编辑器 ———&gt; 选择桥接模式 桥接的为物理机网络 设置eth0网卡静态ip vi &#x2F;etc&#x2F;network&#x2F;interfaces 设置dns vi &#x2F;etc&#x2F;resolv.conf 重启网络 service networking restart 安装arpspoof apt-get install dsniff 检验安装arpspoof是否成功 查看当前局域网ip fping -asg 网关&#x2F;24 断网攻击 arpspoof -i eth0 -t 受害人IP 网关","categories":[],"tags":[]},{"title":"12.6","slug":"12-6","date":"2023-12-06T05:10:30.000Z","updated":"2023-12-06T12:18:58.007Z","comments":true,"path":"2023/12/06/12-6/","permalink":"http://example.com/2023/12/06/12-6/","excerpt":"","text":"centos ssh登录 1.systemctl enable sshd 2.systemctl start sshd 3.vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config esc et nu显示行号 4.38行去掉#后面没有yes就添加yes即可，PermitRootLogin yes 5.systemctl restart sshd 6.update-rc.d ssh enable开机自启 如果没有ip cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F; ls vim ifcfg-ens33 ens33为sentos7版本独有 onboot&#x3D;no改成yes systemctl restart network、 h5 html 在visual studio code 中下载插件 html css support html boilerplate open in browser ***html语法 *** https://www.runoob.com/html/html-basic.html","categories":[],"tags":[]},{"title":"12.5","slug":"12-5","date":"2023-12-05T10:42:12.000Z","updated":"2023-12-05T12:10:31.568Z","comments":true,"path":"2023/12/05/12-5/","permalink":"http://example.com/2023/12/05/12-5/","excerpt":"","text":"pc1可以和pc2，pc3相连 pc2和pc3在同一内网可以相连 proxfier 配置文件： ​ 代理服务器 ​ 代理规则 在名称解析中管理dns wireshark 在虚拟机中装上wireshark后，进入wireshark Ethernet0为wifi口，在虚拟机中ping物理机ip，点击Ethernet0后捕获 在过滤器中选择过滤方式 如ip.dst &#x3D;&#x3D; 物理机ip地址","categories":[],"tags":[]},{"title":"hexo博客内容及主题编辑","slug":"hexo博客内容及主题编辑","date":"2023-12-01T09:45:24.000Z","updated":"2023-12-01T09:56:51.537Z","comments":true,"path":"2023/12/01/hexo博客内容及主题编辑/","permalink":"http://example.com/2023/12/01/hexo%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9%E5%8F%8A%E4%B8%BB%E9%A2%98%E7%BC%96%E8%BE%91/","excerpt":"","text":"写文章# 开启服务 hexo server # 新建文章 hexo new a # 新建草稿b hexo new draft b # 将草稿b成为文章 hexo publish b # 发布页面c hexo new page c # 生成静态文章 hexo generate 或者是 hexo g # 部署文章 hexo deploy 或者是 hexo d 下载工具Typora 生成文件在Typora中编辑 编辑完成后Hexo cleanHexo d –g完成后在博客上显示主题编辑进入该主题的github下载页，我选择主题下载页是这里 https://hexo.io/themes/ 然后在本机上进入博客的目录 cd .&#x2F;themes git clone https://github.com/hexojs/hexo-theme-light.git .&#x2F;light 找到博客目录下的配置文件 _config.yml # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: landscape ## 为自己下载的主题名 然后，通过运行命令 hexo s ，启动本地服务，通过http://localhost:4000/ 查看修改后的效果 运行以下命令，使主题更新到博客 hexo clean hexo g hexo d","categories":[],"tags":[]},{"title":"typora图床使用","slug":"创建个人博客","date":"2023-12-01T09:44:58.000Z","updated":"2023-12-01T10:01:54.840Z","comments":true,"path":"2023/12/01/创建个人博客/","permalink":"http://example.com/2023/12/01/%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"1、安装git 2、安装node 3、注册一个GitHub账户 创建blog文件夹 npm install -g hexo-cli hexo init blog cd blog hexo g 将自己github信息写入hexo Github建库和 shh秘钥 将自己github信息写入hexo npm install hexo-deployer-git –save git config –global user.name “xxx”&#x2F;&#x2F; 你的github用户名，非昵称 git config –global user.email “&#120;&#x78;&#120;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;“&#x2F;&#x2F; 填写你的github注册邮箱 deploy: ​ type: git ​ repository: &#x67;&#x69;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#109;:xxx&#x2F;xxx.github.io.git ​ branch: main 这样hexo的文件会在在github库中显示","categories":[],"tags":[]},{"title":"创建个人博客","slug":"typora图床使用","date":"2023-12-01T09:44:28.000Z","updated":"2023-12-01T09:58:47.177Z","comments":true,"path":"2023/12/01/typora图床使用/","permalink":"http://example.com/2023/12/01/typora%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/","excerpt":"","text":"安装picgo和typoraPicgo图床设置 Token在github在setting→developer settings→ personal access tokens→ Tokens（classic）箭头generate new token Typora设置 偏好设置","categories":[],"tags":[]},{"title":"steam钓鱼","slug":"steam钓鱼","date":"2023-12-01T09:38:42.000Z","updated":"2023-12-01T09:43:44.958Z","comments":true,"path":"2023/12/01/steam钓鱼/","permalink":"http://example.com/2023/12/01/steam%E9%92%93%E9%B1%BC/","excerpt":"","text":"在kali中复制mip22proxychains4 git clone https://github.com/makdosx/mip22 查看权限chmod -R 777 mip22cd mip22 下载并应用proxychains4 bash mip22.sh 生存钓鱼二维码 钓鱼成功","categories":[],"tags":[]},{"title":"永恒之蓝","slug":"永恒之蓝","date":"2023-12-01T08:21:49.000Z","updated":"2023-12-01T08:25:31.408Z","comments":true,"path":"2023/12/01/永恒之蓝/","permalink":"http://example.com/2023/12/01/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/","excerpt":"","text":"Windows系统查看 ip防火墙关闭 kali中利用MSF生成木马 POC文件里exploit.py中的一部分替换掉，直接复制粘贴，将buf替换成USER_PAYLOAD保存 .将POC放入kali里， 攻击windows Windows蓝屏","categories":[],"tags":[]}],"categories":[],"tags":[]}